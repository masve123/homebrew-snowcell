import argparse
import hashlib
import json
import os
import shlex
import subprocess
from pathlib import Path
from typing import Any, Dict, List, Tuple

formula_template = """# WARNING: This file is auto-generated by formula.py.
# Manual changes to this file will be overwritten the next time the file is generated.
# If you need to modify the contents, please update the source template or the generating script.

class {class_name} < Formula
  desc "A CLI tool for interacting with Snowcell Cloud."
  homepage "https://docs.snowcell.io"
  license "AGPL-3.0"
  version "{version}"

  if OS.mac? && Hardware::CPU.intel?
    url "{darwin_amd64_url}"
    sha256 "{darwin_amd64_sha256}"
  elsif OS.mac? && Hardware::CPU.arm?
    url "{darwin_arm64_url}"
    sha256 "{darwin_arm64_sha256}"
  elsif OS.linux? && Hardware::CPU.intel?
    url "{linux_amd64_url}"
    sha256 "{linux_amd64_sha256}"
  elsif OS.linux? && Hardware::CPU.arm?
    url "{linux_arm64_url}"
    sha256 "{linux_arm64_sha256}"
  else
    odie "Unsupported platform or architecture"
  end

  def install
    bin.install "{bin_name}"
  end

  test do
    system "#{{bin}}/{bin_name}", "--version"
  end
end
"""


def fetch_release_details(tag: str, repo: str, field="assets") -> List[Dict[str, Any]]:
    cmd = f"gh release view {tag} --repo={repo} --json={field}"
    process = subprocess.run(shlex.split(cmd), capture_output=True, env=os.environ)
    if process.returncode != 0 or process.stderr.decode() != "":
        raise subprocess.SubprocessError(process.stderr.decode())

    output = process.stdout.decode()
    return json.loads(output).get("assets", [])


def fetch_release_assets(
    tag: str, repo: str, dir: str = "assets", pattern="*.tar.gz"
) -> Dict[str, Path]:
    cmd = f"gh release download {tag} --repo={repo} --dir={dir} --pattern={pattern} --clobber"
    process = subprocess.run(shlex.split(cmd), capture_output=True, env=os.environ)
    if process.returncode != 0 or process.stderr.decode() != "":
        raise subprocess.SubprocessError(process.stderr.decode())

    return {p.name: p for p in Path(dir).iterdir()}


def update_formula(name: str, version: str, assets: List[Dict[str, Any]]):
    darwin_amd64 = find_asset_with_hash(assets, ["darwin", "amd64"])
    darwin_arm64 = find_asset_with_hash(assets, ["darwin", "arm64"])
    linux_amd64 = find_asset_with_hash(assets, ["linux", "amd64"])
    linux_arm64 = find_asset_with_hash(assets, ["linux", "arm64"])

    formula = formula_template.format(
        darwin_amd64_url=darwin_amd64[0],
        darwin_amd64_sha256=darwin_amd64[1],
        darwin_arm64_url=darwin_arm64[0],
        darwin_arm64_sha256=darwin_arm64[1],
        linux_amd64_url=linux_amd64[0],
        linux_amd64_sha256=linux_amd64[1],
        linux_arm64_url=linux_arm64[0],
        linux_arm64_sha256=linux_arm64[1],
        bin_name=name.lower(),
        class_name=name.title(),
        version=version,
    )


    with open(f"Formula/{name.lower()}.rb", "w") as f:
        f.write(formula)


def find_asset_with_hash(assets: list, terms: list) -> Tuple[str, str]:
    try:
        asset = [a for a in assets if all(term in a["name"] for term in terms)][0]
        return asset["url"], calc_hash(Path("assets") / asset["name"])
    except IndexError:
        raise


def calc_hash(p: Path) -> str:
    hasher = hashlib.sha256()
    with p.open("rb") as f:
        while chunk := f.read(1024 * 1024 * 1):
            hasher.update(chunk)
    return hasher.hexdigest()


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("--name", required=True)
    parser.add_argument("--version", required=True)
    parser.add_argument("--tag", required=True)
    parser.add_argument("--repo", required=True)
    opts = parser.parse_args()

    fetch_release_assets(opts.tag, opts.repo)
    assets = fetch_release_details(opts.tag, opts.repo)
    update_formula(opts.name, opts.version, assets)


if __name__ == "__main__":
    main()